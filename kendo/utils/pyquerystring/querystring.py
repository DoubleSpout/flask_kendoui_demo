# -*- coding: utf-8 -*-

from .compat import parse_qsl
from .compat import is_py3


def parse(data):
    obj = QueryStringParser(data)
    return obj.result


class QueryStringToken(object):

    ARRAY = "ARRAY"
    OBJECT = "OBJECT"
    KEY = "KEY"
    VALUE = "VALUE"


class QueryStringParser(object):

    def __init__(self, data):
        self.result = {}

        if isinstance(data, str):
            sorted_pairs = self._sorted_from_string(data)
        else:
            sorted_pairs = self._sorted_from_obj(data)

        [self.process(x) for x in sorted_pairs]

    def _sorted_from_string(self, data):
        stage1 = parse_qsl(data)
        stage2 = [(x[0].strip(), x[1].strip()) for x in stage1]
        return sorted(stage2, key=lambda p: p[0])

    def _sorted_from_obj(self, data):
        # data is a list of the type generated by parse_qsl
        if isinstance(data, list):
            items = data
        else:
            # complex objects:
            try:
                # django.http.QueryDict,
                items = [(i[0], j) for i in data.lists() for j in i[1]]
            except AttributeError:
                # webob.multidict.MultiDict
                # werkzeug.datastructures.MultiDict
                if is_py3:
                    items = data.items()
                else:
                    items = data.iteritems()

        return sorted(items, key=lambda p: p[0])

    def process(self, pair):
        key = pair[0]
        value = pair[1]

        #faster than invoking a regex
        try:
            key.index("[")
            self.parse(key, value)
            return
        except ValueError:
            pass

        try:
            key.index(".")
            self.parse(key, value)
            return
        except ValueError:
            pass

        self.result[key] = value

    def parse(self, key, value):
        ref = self.result
        tokens = self.tokens(key)

        for token in tokens:
            token_type, key = token
            #如果不存在key，则继续循环
            if key == '':
                continue

            if token_type == QueryStringToken.ARRAY:
                if key not in ref:
                    ref[key] = []
                ref = ref[key]

            elif token_type == QueryStringToken.OBJECT:
                if key not in ref:
                    ref[key] = {}
                ref = ref[key]

            #如果是最后一个获取值的，则直接赋值
            elif token_type == QueryStringToken.VALUE:
                ref[key] = value

            elif token_type == QueryStringToken.KEY:
                try:
                    if key not in ref:
                        ref[key] = {}
                    ref = ref[key]
                    #next(tokens)
                # TypeError is for pet[]=lucy&pet[]=ollie
                # if the array key is empty a type error will be raised
                except (IndexError, KeyError, TypeError):
                    # the index didn't exist
                    # so we look ahead to see what we are setting
                    # there is not a next token
                    # set the value
                    try:

                        next_token = next(tokens)

                        if next_token[0] == QueryStringToken.ARRAY:
                            ref.append([])
                            ref = ref[key]
                        elif next_token[0] == QueryStringToken.OBJECT:

                            try:
                                ref[key] = {}
                            except IndexError:
                                ref.append({})

                            ref = ref[key]
                    except StopIteration:
                        try:
                            ref.append(value)
                        except AttributeError:
                            ref[key] = value
                        return

    def tokens(self, key):
        buf = ""
        pos = 0
        orignKey = key
        for char in key:
            pos += 1
            if char == "[":
                yield QueryStringToken.OBJECT, buf
                buf = ""

            elif char == ".":
                yield QueryStringToken.OBJECT, buf
                buf = ""

            elif char == "]":
                try:
                    #如果]这个是最后一个
                    if pos == len(orignKey):
                        yield QueryStringToken.VALUE, str(buf)
                        buf = ""
                    else:
                        yield QueryStringToken.KEY, str(buf)
                        buf = ""
                except ValueError:
                    yield QueryStringToken.KEY, None
            else:
                buf = buf + char

        if len(buf) > 0:
            yield QueryStringToken.KEY, buf
        else:
            raise StopIteration()
